#!/bin/bash

## Copyright (C) 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "$0: START"

true "$0: checklist..."
df -h
read -r press_enter_to_continue

true "$0: checklist..."
ls -la ~/virtualbox-windows-installer-binary/VirtualBox-* || true
read -r press_enter_to_continue

build_args=()

## Also build the Whonix Windows Installer.
## TODO: disabled for now until sha512sum overwriting issue was fixed in dm-prepare-release
#build_args+=(--target windows)

build_args+=(--repo true)

## XXX: hardcoded path
cd ~/derivative-maker

test -d ~/.ssh
./help-steps/signing-key-test

## Build '--flavor whonix-workstation-xfce' first because it is the most
## complex, when used with '--target windows', because:
## - *_prepare-build-machine does git clone virtualbox-windows-installer-binary
## - dm-prepare-release builds Whonix Windows Installer
[ -n "$flavors_list" ] || flavors_list=(
  whonix-workstation-xfce
  whonix-gateway-xfce
  kicksecure-xfce
  whonix-workstation-cli
  whonix-gateway-cli
  kicksecure-cli
)

build_upload_noninteractive=true
export build_upload_noninteractive

multi_target_args=()

## --target virtualbox
## Build VirtualBox ova. (amd64 for Windows, Linux, Mac)
multi_target_args+=(--target virtualbox)

multi_target_args+=(--target iso)

for flavor_item in "${flavors_list[@]}"; do
  ./derivative-delete "${build_args[@]}" "${multi_target_args[@]}" --flavor "$flavor_item" "$@"
done

for flavor_item in "${flavors_list[@]}"; do
  ./build-steps.d/*_sanity-tests "${build_args[@]}" "${multi_target_args[@]}" --flavor "$flavor_item" "$@"
done

./build-steps.d/*_prepare-build-machine "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
./build-steps.d/*_cowbuilder-setup "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
./build-steps.d/*_local-dependencies "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
./build-steps.d/*_create-debian-packages "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"

for flavor_item in "${flavors_list[@]}"; do
  ./build-steps.d/*_sanity-tests "${build_args[@]}" "${multi_target_args[@]}" --flavor "$flavor_item" "$@"
done

SKIP_SCRIPTS+=" sanity-tests "
SKIP_SCRIPTS+=" prepare-build-machine "
SKIP_SCRIPTS+=" cowbuilder-setup "
SKIP_SCRIPTS+=" local-dependencies "
SKIP_SCRIPTS+=" create-debian-packages "
export SKIP_SCRIPTS

for flavor_item in "${flavors_list[@]}"; do
  case $flavor_item in
    kicksecure-xfce|kicksecure-cli)
      ./derivative-maker "${build_args[@]}" --target iso        --flavor "$flavor_item" "$@"
      ./derivative-maker "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
    *)
      ./derivative-maker "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
  esac
done

for flavor_item in "${flavors_list[@]}"; do
  if echo "$flavor_item" | grep --quiet "gateway" ; then
    ## Not needed for gateway due to unified images.
    continue
  fi
  case $flavor_item in
    kicksecure-xfce|kicksecure-cli)
      dm-prepare-release "${build_args[@]}" --target iso        --flavor "$flavor_item" "$@"
      dm-prepare-release "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
    *)
      dm-prepare-release "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
  esac
done

for flavor_item in "${flavors_list[@]}"; do
  if echo "$flavor_item" | grep --quiet "gateway" ; then
    ## Not needed for gateway due to unified images.
    continue
  fi

  if echo "$@" | grep --quiet "remote-derivative-packages true" ; then
    ## Skip upload of debug images.
    echo simulate-echo-only: dm-upload-images "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
    continue
  fi

  case $flavor_item in
    kicksecure-xfce|kicksecure-cli)
      dm-upload-images "${build_args[@]}" --target iso        --flavor "$flavor_item" "$@"
      dm-upload-images "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
    *)
      dm-upload-images "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
      ;;
  esac

done

true "$0: END"
