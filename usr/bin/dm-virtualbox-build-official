#!/bin/bash

## Copyright (C) 2023 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "$0: START"

true "$0: checklist..."
df -h
read -r press_enter_to_continue

true "$0: checklist..."
ls -la ~/virtualbox-windows-installer-binary/VirtualBox-* || true
read -r press_enter_to_continue

build_args=()

## Also build the Whonix-Windows-Installer.
## TODO: Disabled until Whonix-Windows-Installer authenticode certificate is available.
#build_args+=(--target windows)

build_args+=(--repo true)
## Make sure official builds come with a downloaded browser (Tor Browser) installed by default.
build_args+=(--tb closed)

## XXX: hardcoded path
cd ~/derivative-maker

## Avoid building from outdated version.
diff /usr/bin/dm-virtualbox-build-official ./packages/kicksecure/developer-meta-files/usr/bin/dm-virtualbox-build-official || read -r press_enter_to_continue

test -d ~/.ssh

run_cmd() {
  TESTING_MODE=0
  if [ "$TESTING_MODE" -eq 1 ]; then
    set +x
    echo "$@"
  else
    "$@"
  fi
}

run_cmd ./help-steps/signing-key-test

## - 1) Build '--flavor kicksecure-xfce' because building ISO, which is newer.
## - 2) Build '--flavor whonix-gateway-xfce' because it is required to be able to
##      run dm-prepare-release due to unified ova files.
## - 3) Build '--flavor whonix-workstation-xfce' because it is the most
##   complex, because of downloading Tor Browser as well as when used with
##   '--target windows', because:
##   - *_prepare-build-machine does git clone virtualbox-windows-installer-binary
##   - dm-prepare-release builds Whonix Windows Installer
[ -n "$flavors_list" ] || flavors_list=(
  kicksecure-xfce
  kicksecure-cli
  whonix-gateway-xfce
  whonix-workstation-xfce
  whonix-gateway-cli
  whonix-workstation-cli
)

build_upload_noninteractive=true
export build_upload_noninteractive

multi_target_args=()

## --target virtualbox
## Build VirtualBox ova. (amd64 for Windows, Linux, Mac)
multi_target_args+=(--target virtualbox)

multi_target_args+=(--target iso)

for flavor_item in "${flavors_list[@]}"; do
  run_cmd ./derivative-delete "${build_args[@]}" "${multi_target_args[@]}" --flavor "$flavor_item" "$@"
done

for flavor_item in "${flavors_list[@]}"; do
  ## Not yet using multi_target_args as the sanity test for Whonix-Gateway ISO would complain that the VMs
  ## have not been built yet.
  run_cmd ./build-steps.d/*_sanity-tests "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
done

run_cmd ./build-steps.d/*_prepare-build-machine "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
run_cmd ./build-steps.d/*_cowbuilder-setup "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
run_cmd ./build-steps.d/*_local-dependencies "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"
run_cmd ./build-steps.d/*_create-debian-packages "${build_args[@]}" "${multi_target_args[@]}" --flavor internal "$@"

SKIP_SCRIPTS+=" sanity-tests "
SKIP_SCRIPTS+=" prepare-build-machine "
SKIP_SCRIPTS+=" cowbuilder-setup "
SKIP_SCRIPTS+=" local-dependencies "
SKIP_SCRIPTS+=" create-debian-packages "
export SKIP_SCRIPTS

for flavor_item in "${flavors_list[@]}"; do
  case $flavor_item in
    kicksecure-xfce|kicksecure-cli)
      true "INFO: ISO build flavor."
      run_cmd ./derivative-maker "${build_args[@]}" --target iso --flavor "$flavor_item" "$@"
      run_cmd dm-prepare-release "${build_args[@]}" --target iso --flavor "$flavor_item" "$@"
      ;;
    *)
      true "INFO: Non-ISO build flavor."
      ;;
  esac

  run_cmd ./derivative-maker "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
  run_cmd dm-prepare-release "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
done

for flavor_item in "${flavors_list[@]}"; do
  if echo "$flavor_item" | grep --quiet "gateway" ; then
    ## Not needed for gateway due to unified images.
    continue
  fi

  if echo "$@" | grep --quiet "remote-derivative-packages true" ; then
    ## Skip upload of debug images.
    echo simulate-echo-only: run_cmd dm-upload-images "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
    continue
  fi

  case $flavor_item in
    kicksecure-xfce|kicksecure-cli)
      true "INFO: ISO build flavor."
      run_cmd dm-upload-images "${build_args[@]}" --target iso --flavor "$flavor_item" "$@"
      ;;
    *)
      true "INFO: Non-ISO build flavor."
      ;;
  esac

  run_cmd dm-upload-images "${build_args[@]}" --target virtualbox --flavor "$flavor_item" "$@"
done

true "$0: END"
