#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: ${BASH_SOURCE} $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${MYDIR}"

source ~/derivative-maker/help-steps/pre
source ~/derivative-maker/help-steps/colors
source ~/derivative-maker/help-steps/variables

cd "${dist_binary_build_folder}"

sanity_tests() {
   command -v mktorrent >/dev/null
   command -v transmission-show >/dev/null
   command -v signify-openbsd >/dev/null
   test -f "${signify_public_key}"
   test -f "${signify_private_key}"
   test -f "${binary_image_installer_dist_source}"

   "${dist_source_help_steps_folder}/signing-key-test" "$@"
}

installer_dist() {
   if [ ! "${dist_build_installer_dist}" = "true" ]; then
      return 0
   fi

   command -v git >/dev/null
   command -v str_replace >/dev/null

   mkdir --parents "${binary_image_installer_dist_folder}"
   cp "${binary_image_installer_dist_source}" "${binary_image_installer_dist_file}"

   installer_dist_source_folder="$(dirname "${binary_image_installer_dist_source}")"
   pushd "${installer_dist_source_folder}"
   git_tag_current="$(git describe --always --abbrev=1000000000)"
   ## example git_tag_current:
   ## 11.7-1
   ## example git_tag_current:
   ## 11.7-1-23-g5e70e4d81e494e66b296f89136b1ac332e8a738d
   popd

   search="commit-hash-replace-me"
   replace="${git_tag_current}"
   file_name="${binary_image_installer_dist_file}"
   str_replace "${search}" "${replace}" "${file_name}"
}

windows_installer() {
   if [ ! "${dist_build_windows_installer}" = "true" ]; then
      true "$0: INFO: Skip ${FUNCNAME}, because dist_build_windows_installer is not set to true."
      return 0
   fi

   if ! test -r "${binary_image_ova_file}" ; then
      error "$0: binary_image_ova_file ${binary_image_ova_file} does not exist!"
   fi

   test -d ~/virtualbox-windows-installer-binary
   pushd ~/virtualbox-windows-installer-binary >/dev/null

   local counter
   counter=0
   for file_name in ./VirtualBox-*.exe ; do
      counter=$((counter + 1))
   done

   if [ "${counter}" -gt "1" ]; then
      true "$0: ERROR: Multiple file matching VirtualBox-*.exe!"
      exit 1
   fi

   test -r "${file_name}"
   FILE_VBOX_INST_EXE=$(realpath "${file_name}")
   test -r "${FILE_VBOX_INST_EXE}"

   "${dist_developer_meta_files_folder}/usr/bin/dm-virtualbox-installer-exe-verify-windows"
   popd >/dev/null

   ## environment variables read by Whonix-Installer build.sh
   TARGET_SYSTEM="WINDOWS"
   FILE_LICENSE="${source_code_folder_dist}/packages/whonix/whonix-base-files/usr/share/whonix/WHONIX_BINARY_LICENSE_AGREEMENT"
   FILE_WHONIX_OVA="${binary_image_ova_file}"
   FILE_WHONIX_STARTER_MSI="${source_code_folder_dist}/windows/Whonix-Starter/WhonixStarterInstaller.msi"
   #FILE_VBOX_INST_EXE="${FILE_VBOX_INST_EXE}"
   FILE_INSTALLER_BINARY_FINAL="${binary_image_windows_installer_file}"
   export TARGET_SYSTEM FILE_LICENSE FILE_WHONIX_OVA FILE_WHONIX_STARTER_MSI FILE_VBOX_INST_EXE FILE_INSTALLER_BINARY_FINAL

   VERSION="${dist_build_version}"
   VERSION_FULL=$(basename "${binary_image_ova_file}")
   MANUFACTURE="ENCRYPTED SUPPORT LP"
   DESCRIPTION="Whonix-Starter"
   export VERSION VERSION_FULL MANUFACTURE DESCRIPTION

   pushd "${source_code_folder_dist}/windows/Whonix-Starter" >/dev/null
   ## Creates WhonixStarterInstaller.msi
   ./build_on_linux_for_win64
   popd >/dev/null

   rm --force "${binary_image_windows_installer_file}"

   pushd "${source_code_folder_dist}/windows/Whonix-Installer" >/dev/null
   ## Requires already existing WhonixStarterInstaller.msi
   ## Creates ${binary_image_windows_installer_file}
   "${source_code_folder_dist}/windows/Whonix-Installer/build.sh"
   popd >/dev/null
}

libvirt_compress() {
   local continue_maybe
   continue_maybe=no
   if [ "${dist_build_raw}" = "true" ]; then
      continue_maybe=yes
   fi
   if [ "${dist_build_qcow2}" = "true" ]; then
      continue_maybe=yes
   fi
   if [ "${continue_maybe}" = "no" ]; then
      return 0
   fi

   if [ "${dist_build_qcow2}" = "true" ]; then
      rm --force "$(basename "${libvirt_target_qcow2_xz_archive_file}")"
      true "INFO: Checking if all files to be added to libvirt_target_qcow2_xz_archive_file ${libvirt_target_qcow2_xz_archive_file} exist..."
   fi
   if [ "${dist_build_raw}" = "true" ]; then
      rm --force "$(basename "${libvirt_target_raw_xz_archive_file}")"
      true "INFO: Checking if all files to be added to libvirt_target_raw_xz_archive_file ${libvirt_target_raw_xz_archive_file} exist..."
   fi

   if [ "${dist_build_type_long}" = "kicksecure" ]; then
      test -f "${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
      test -f "${dist_binary_build_folder}/KICKSECURE_DISCLAIMER"
   else
      test -f "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
      test -f "${dist_binary_build_folder}/WHONIX_DISCLAIMER"
   fi

   if [ "${vm_multiple}" = "false" ]; then
      test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.xml"
      if [ "${dist_build_raw}" = "true" ]; then
         test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.raw"
      fi
      if [ "${dist_build_qcow2}" = "true" ]; then
         test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
      fi
   else
      test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.xml"
      test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.xml"

      test -f "${libvirt_target_network_file_external}"
      test -f "${libvirt_target_network_file_internal}"

      if [ "${dist_build_raw}" = "true" ]; then
         test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw"
         test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw"
         true "INFO: Ok, all files to be added to ${libvirt_target_raw_xz_archive_file} exist."
      fi
      if [ "${dist_build_qcow2}" = "true" ]; then
         test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
         test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
         true "INFO: Ok, all files to be added to ${libvirt_target_qcow2_xz_archive_file} exist."
      fi
   fi

   ## Not using `gzip`, because it cannot handle sparse files:
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=535987
   #pv "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_version}.qcow2" | gzip -n - > "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_version}.libvirt.tar.gz"
   #pv "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_version}.qcow2" | gzip -n - > "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_version}.libvirt.tar.gz"

   ## Using `tar` with `--xz` and `--mtime="2014-05-06 00:00:00"`:
   ## - will result in a deterministic archive. We do not have deterministic
   ##   images yet in the first place (but at least verifiable ones), but
   ##   hopefully some day. Does not hurt to already use tar options that do
   ##   not add unnecessary non-deterministic contents.
   ## Not using tar --verbose:
   ## - slows down tar too much.

   local filelist_full_path

   if [ "${dist_build_type_long}" = "kicksecure" ]; then
      filelist_full_path+="${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT "
      filelist_full_path+="${dist_binary_build_folder}/KICKSECURE_DISCLAIMER "
   else
      filelist_full_path+="${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT "
      filelist_full_path+="${dist_binary_build_folder}/WHONIX_DISCLAIMER "
   fi

   if [ "${vm_multiple}" = "false" ]; then
      filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.xml "

      if [ "${dist_build_raw}" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.raw "
      fi
      if [ "${dist_build_qcow2}" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
      fi
   else
      filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.xml "
      filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.xml "
      filelist_full_path+="${libvirt_target_network_file_external} "
      filelist_full_path+="${libvirt_target_network_file_internal} "

      if [ "${dist_build_raw}" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw "
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw "
      fi
      if [ "${dist_build_qcow2}" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
      fi
   fi

   ## XXX: --target raw and --target qcow2 can currently not be combined but that seems unlikely.
   if [ "${dist_build_raw}" = "true" ]; then
      xz_archive="${libvirt_target_raw_xz_archive_file}"
   fi
   if [ "${dist_build_qcow2}" = "true" ]; then
      xz_archive="${libvirt_target_qcow2_xz_archive_file}"
   fi

   true "filelist_full_path: ${filelist_full_path}"

   local file_name_item_full_path
   for file_name_item_full_path in ${filelist_full_path} ; do
      test -f "${file_name_item_full_path}"
      filelist_base_name+=" $(basename "${file_name_item_full_path}")"
   done

   local file_name_item_base_name
   for file_name_item_base_name in ${filelist_base_name} ; do
      test -f "${file_name_item_base_name}"
   done

   ## TODO: add progress meter (using `pv`?)
   tar \
      --create \
      --verbose \
      --owner=0 --group=0 --numeric-owner \
      --mode=go=rX,u+rw,a-s \
      --sort=name \
      --sparse \
      --mtime='2015-10-21 00:00Z' \
      --xz \
      --directory="${dist_binary_build_folder}" \
      --file "$(basename "${xz_archive}")" \
      ${filelist_base_name}

   strip-nondeterminism "${xz_archive}"

   sync

   ## sanity test
   if [ ! -r "${xz_archive}" ]; then
      error "xz_archive ${xz_archive} not readable!"
   fi
}

virtualbox_export() {
   if [ ! "${dist_build_virtualbox}" = "true" ]; then
      return 0
   fi

   local producturl vendorurl vendor eulafile description
   if [ "${dist_build_type_long}" = "kicksecure" ]; then
      producturl="https://www.${project_clearnet}"
      vendor="Kicksecure"
      eulafile="${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
   else
      producturl="https://www.${project_clearnet}/wiki/Other_Operating_Systems"
      vendor="Whonix"
      eulafile="${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
   fi

   vendorurl="https://www.${project_clearnet}"
   description="\
Build Version [A]: ${dist_build_version}

Stay tuned! [B]

Please donate! [C]

[A] https://www.${project_clearnet}/wiki/Build_Version
[B] https://www.${project_clearnet}/wiki/Stay_Tuned
[C] https://www.${project_clearnet}/wiki/Donate"

   rm --force "${binary_image_ova_file}"

   ## --vsys needs to precede --eulafile.

   ## https://forums.whonix.org/t/allow-us-to-download-the-vm-files-in-a-compressed-format-like-zip-7z-gzip-etc/14210/6
   TAR_OPTIONS="\
      ${TAR_OPTIONS}
      --owner=0 --group=0 --numeric-owner \
      --mode=go=rX,u+rw,a-s \
      --sort=name \
      --sparse \
      --mtime='2015-10-21 00:00Z' \
      --xz \
      "
   export TAR_OPTIONS
   XZ_OPT="${XZ_OPT} -9"
   export XZ_OPT

   if [ "${vm_multiple}" = "false" ]; then
      VBoxManage \
         export "${VMNAME}" \
         --vsys "0" \
         --eulafile "${eulafile}" \
         --description "${description}" \
         --manifest \
         --product "${VMNAME}" \
         --producturl "${producturl}" \
         --vendor "${vendor}" \
         --vendorurl "${vendorurl}" \
         --version "${dist_build_version}" \
         --output "${binary_image_ova_file}"
   else
      VBoxManage \
         export ${vm_names_to_be_exported} \
         --output "${binary_image_ova_file}" \
         --vsys '0' \
            --eulafile "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT" \
            --description "${description}" \
            --manifest \
            --product "Whonix-Gateway" \
            --producturl "https://www.${project_clearnet}/wiki/Whonix-Gateway" \
            --vendor "Whonix" \
            --vendorurl "https://www.${project_clearnet}" \
            --version "${dist_build_version}" \
         --vsys '1' \
            --eulafile "${binary_image_text}" \
            --description "${description}" \
            --manifest \
            --product "Whonix-Workstation" \
            --producturl "https://www.${project_clearnet}/wiki/Whonix-Workstation" \
            --vendor "Whonix" \
            --vendorurl "https://www.${project_clearnet}" \
            --version "${dist_build_version}"
   fi

   ## Only important for redistribution.
   ## VirtualBox creates ${binary_image_ova_file} with u+r only, which is problematic
   ## with respect to rsync.
   chmod ugo+r "${binary_image_ova_file}"

   sync

   ## Sanity test.
   ## A different --vmname is required, because ${VMNAME} does already exist
   ## in the list of imported VirtualBox machines.
   if [ "${vm_multiple}" = "false" ]; then
      VBoxManage \
         import "${binary_image_ova_file}" \
         --vsys "0" \
         --eula show \
         --vmname "${VMNAME}-${dist_build_version}"

      VBoxManage \
         import "${binary_image_ova_file}" \
         --vsys "0" \
         --eula accept \
         --vmname "${VMNAME}-${dist_build_version}" \
         --dry-run
   else
      VBoxManage \
         import "${binary_image_ova_file}" \
         --vsys "0" \
            --eula show \
            --vmname "Whonix-Gateway-${dist_build_version}" \
         --vsys "1" \
            --eula show \
            --vmname "Whonix-Workstation-${dist_build_version}" \

      VBoxManage \
         import "${binary_image_ova_file}" \
         --vsys "0" \
            --eula accept \
            --vmname "Whonix-Gateway-${dist_build_version}" \
            --dry-run \
         --vsys "1" \
            --eula accept \
            --vmname "Whonix-Workstation-${dist_build_version}" \
            --dry-run
   fi
}

torrent_create() {
   ## Thanks to:
   ## https://github.com/moba/createtortorrents/blob/master/createtorrents.sh

   TRACKERS=""
   ## https://fosstorrents.com/tracker/
   TRACKERS+="http://fosstorrents.com:6969/announce"
   TRACKERS+=","
   TRACKERS+="udp://fosstorrents.com:6969/announce"
   TRACKERS+=","
   ## https://opentrackr.org/
   TRACKERS+="udp://tracker.opentrackr.org:1337/announce"
   TRACKERS+=","
   ## https://torrent.eu.org/
   TRACKERS+="udp://tracker.torrent.eu.org:451"
   true "TRACKERS: ${TRACKERS}"

   ## Not well supported by BitTorrent clients.
   ## Multi file webseeds do not work
   ##     https://trac.transmissionbt.com/ticket/4437
   ## (fixed upstream, but takes a while to propagate to Debian stable)
   #mktorrent \
   #   --verbose \
   #   --announce="${TRACKERS}" \
   #   --web-seed "https://download.${project_clearnet}/Whonix-Gateway-7.ova" \
   #   --web-seed "https://download.${project_clearnet}/Whonix-Workstation-7.ova" \
   #   ~/7

   ## CoralCDN:
   ## .8008.nyud.net can no longer be appended to https://download.${project_clearnet},
   ## because CoralCDN appears to no longer support files greater than 50 MB.

   ## Working.
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${project_clearnet}/ova/Whonix-Gateway-7.ova");' "$2")"
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${project_clearnet}/ova/Whonix-Workstation-7.ova");' "$2")"

   ## Not working.
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${project_clearnet}/ova/Whonix-Gateway-7.ova");' "$2")"
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${project_clearnet}/ova/Whonix-Workstation-7.ova");' "$2")"
}

sign_cmd_gpg() {
   ## GPG signatures do not authenticate filenames by default, therefore add
   ## the name of the file as a OpenPGP notation so at least users that look
   ## at OpenPGP notations have a chance to detect if file names have been
   ## tampered with.
   ${gpg_bin} --detach-sign --armor --yes --set-notation "file@name"="$(basename "$1")" "$1"
}

sign_cmd_signify() {
   ## To create a key for signify-openbsd, see:
   ## derivative-maker help-steps/signing-key-create

   ## Big file are unfortunately unsupported by signify.
   if [ "$file_size_mb" -ge "1000" ]; then
      return 0
   fi
   ## https://forums.whonix.org/t/signify-openbsd/7842
   signify-openbsd -S -s "${signify_private_key}" -m "$1" -x "$2"
   ## Sanity test.
   test -f "$2"
}

verify_cmd_gpg() {
   ${gpg_bin} --verify-options show-notations --verify "$1"
}

verify_cmd_signinfy() {
   if [ "$file_size_mb" -ge "100" ]; then
      return 0
   fi
   signify-openbsd -V -p "${signify_public_key}" -m "$1" -x "$2"
}

sign_and_verify() {
   file_size_bytes=$(stat -c%s "$1")
   # Convert bytes to megabytes
   file_size_mb=$(echo "scale=0; $file_size_bytes / 1024 / 1024" | bc)

   sign_cmd_gpg "${1}"
   verify_cmd_gpg "${1}.asc"
   sign_cmd_signify "${1}" "${1}.sig"
   verify_cmd_signinfy "${1}" "${1}.sig"
}

signatures_create() {
   local var_names file_list upload_url_part
   var_names=()
   file_list=()
   upload_url_part=()

   if [ "${dist_build_virtualbox}" = "true" ]; then
      var_names+=("binary_image_ova_file")
      file_list+=("${binary_image_ova_file}")
      upload_url_part+=("ova")
   fi
   if [ "${dist_build_raw}" = "true" ]; then
      var_names+=("libvirt_target_raw_xz_archive_file")
      file_list+=("${libvirt_target_raw_xz_archive_file}")
      upload_url_part+=("raw")
   fi
   if [ "${dist_build_qcow2}" = "true" ]; then
      var_names+=("libvirt_target_qcow2_xz_archive_file")
      file_list+=("${libvirt_target_qcow2_xz_archive_file}")
      upload_url_part+=("libvirt")
   fi
   if [ "${dist_build_iso}" = "true" ]; then
      var_names+=("binary_image_iso_file")
      file_list+=("${binary_image_iso_file}")
      upload_url_part+=("iso")
   fi
   if [ "${dist_build_installer_dist}" = "true" ]; then
      var_names+=("binary_image_installer_dist_file")
      file_list+=("${binary_image_installer_dist_file}")
      upload_url_part+=("dist-installer-cli")
   fi
   if [ "${dist_build_windows_installer}" = "true" ]; then
      var_names+=("binary_image_windows_installer_file")
      file_list+=("${binary_image_windows_installer_file}")
      upload_url_part+=("windows")
   fi

   ## Debugging.
   pwd

   set -o nounset

   local i
   for i in "${!file_list[@]}"; do
      true "Variable Name: ${var_names[i]}"
      true "Variable Content: ${file_list[i]}"
      true "upload_url_part: ${upload_url_part[i]}"

      local file_item url_part_item
      file_item="${file_list[i]}"
      url_part_item="${upload_url_part[i]}"

      rm --force "${file_item}.torrent"
      mktorrent \
         --verbose \
         --announce="${TRACKERS}" \
         --web-seed "https://download.${project_clearnet}/${url_part_item}/${dist_build_version}/$(basename "${file_item}")" \
         -o "${file_item}.torrent" \
         "${file_item}"
      transmission-show "${file_item}.torrent"

      ## Using `basename` so we end up with relative paths in hash sums file.
      sha512sum "$(basename "${file_item}")" | tee "${file_item}.sha512sums" >/dev/null
      sha512sum --check "${file_item}.sha512sums"

      sign_and_verify "${file_item}"
      sign_and_verify "${file_item}.torrent"
      sign_and_verify "${file_item}.sha512sums"
   done

   ## TODO: Remove when whole script is ready for nounset.
   set +o nounset
}

main() {
   sanity_tests "$@"

   ## libvirt_compress uses --directory="${dist_binary_build_folder}"
   if [ "${dist_build_type_long}" = "kicksecure" ]; then
      cp "${source_code_folder_dist}/packages/kicksecure/kicksecure-base-files/usr/share/kicksecure/KICKSECURE_BINARY_LICENSE_AGREEMENT" "${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
      cp "${source_code_folder_dist}/packages/kicksecure/kicksecure-base-files/usr/share/kicksecure/KICKSECURE_DISCLAIMER" "${dist_binary_build_folder}/KICKSECURE_DISCLAIMER"
   else
      cp "${source_code_folder_dist}/packages/whonix/whonix-base-files/usr/share/whonix/WHONIX_BINARY_LICENSE_AGREEMENT" "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
      cp "${source_code_folder_dist}/packages/whonix/whonix-base-files/usr/share/whonix/WHONIX_DISCLAIMER" "${dist_binary_build_folder}/WHONIX_DISCLAIMER"
   fi

   if [ "${dist_build_type_long}" = "gateway" ]; then
      true "$0: INFO: Skip, because dist_build_type_long is gateway. Not needed because of unified Whonix-Gateway and Whonix-Workstation images."
      return 0
   fi

   vm_multiple=false
   if [ "${dist_build_type_long}" = "workstation" ]; then
      vm_multiple=true
      ## dist_build_desktop could be KDE, CLI, Xfce, RPi or CUSTOM
      vm_names_to_be_exported="Whonix-Gateway-${dist_build_desktop} Whonix-Workstation-${dist_build_desktop}"
   fi
   if [ "${dist_build_type_long}" = "custom-workstation" ]; then
      vm_names_to_be_exported="${VMNAME}"
   fi
   if [ "${dist_build_type_long}" = "kicksecure" ]; then
      vm_names_to_be_exported="${VMNAME}"
   fi

   installer_dist
   libvirt_compress
   virtualbox_export
   windows_installer
   torrent_create
   signatures_create
   sync
}

main "$@"
