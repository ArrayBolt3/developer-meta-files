#!/bin/bash

## Copyright (C) 2012 - 2022 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$MYDIR"

source ~/derivative-maker/help-steps/pre
source ~/derivative-maker/help-steps/colors
source ~/derivative-maker/help-steps/variables

cd "${dist_binary_build_folder}"

sanity_tests() {
   command -v mktorrent >/dev/null
   command -v signify-openbsd >/dev/null
   test -f "$signify_public_key"
   test -f "$signify_private_key"
   test -f "$binary_image_installer_dist_source"

   "$dist_source_help_steps_folder/gpg_test_sign"
}

libvirt_compress() {
   local continue_maybe
   continue_maybe=no
   if [ "$dist_build_raw" = "true" ]; then
      continue_maybe=yes
   fi
   if [ "$dist_build_qcow2" = "true" ]; then
      continue_maybe=yes
   fi
   if [ "$dist_build_iso" = "true" ]; then
      continue_maybe=no
   fi
   if [ "$dist_build_installer_dist" = "true" ]; then
      continue_maybe=no
   fi
   if [ "$continue_maybe" = "no" ]; then
      return 0
   fi

   if [ "$dist_build_qcow2" = "true" ]; then
      rm --force "$(basename $libvirt_target_raw_xz_archive)"
      true "INFO: Checking if all files to be added to libvirt_target_raw_xz_archive $libvirt_target_raw_xz_archive exist..."
   fi
   if [ "$dist_build_raw" = "true" ]; then
      rm --force "$(basename $libvirt_target_qcow2_xz_archive)"
      true "INFO: Checking if all files to be added to libvirt_target_qcow2_xz_archive $libvirt_target_qcow2_xz_archive exist..."
   fi

   if [ "$dist_build_type_long" = "kicksecure" ]; then
      test -f "${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
      test -f "${dist_binary_build_folder}/KICKSECURE_DISCLAIMER"
   else
      test -f "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
      test -f "${dist_binary_build_folder}/WHONIX_DISCLAIMER"
   fi

   if [ "$vm_multiple" = "false" ]; then
      test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.xml"
      if [ "$dist_build_raw" = "true" ]; then
         test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.raw"
      fi
      if [ "$dist_build_qcow2" = "true" ]; then
         test -f "${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
      fi
   else
      test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.xml"
      test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.xml"

      test -f "$libvirt_target_network_file_external"
      test -f "$libvirt_target_network_file_internal"

      if [ "$dist_build_raw" = "true" ]; then
         test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw"
         test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw"
         true "INFO: Ok, all files to be added to $libvirt_target_raw_xz_archive exist."
      fi
      if [ "$dist_build_qcow2" = "true" ]; then
         test -f "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
         test -f "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2"
         true "INFO: Ok, all files to be added to $libvirt_target_qcow2_xz_archive exist."
      fi
   fi


   ## Not using `gzip`, because it cannot handle sparse files:
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=535987
   #pv "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_version}.qcow2" | gzip -n - > "${dist_binary_build_folder}/Whonix-Gateway-${dist_build_version}.libvirt.tar.gz"
   #pv "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_version}.qcow2" | gzip -n - > "${dist_binary_build_folder}/Whonix-Workstation-${dist_build_version}.libvirt.tar.gz"

   ## Using `tar` with `--xz` and `--mtime="2014-05-06 00:00:00"`:
   ## - will result in a deterministic archive. We do not have deterministic
   ##   images yet in the first place (but at least verifiable ones), but
   ##   hopefully some day. Does not hurt to already use tar options that do
   ##   not add unnecessary non-deterministic contents.
   ## Not using tar --verbose:
   ## - slows down tar too much.

   local filelist_full_path

   if [ "$dist_build_type_long" = "kicksecure" ]; then
      filelist_full_path+="${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT "
      filelist_full_path+="${dist_binary_build_folder}/KICKSECURE_DISCLAIMER "
   else
      filelist_full_path+="${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT "
      filelist_full_path+="${dist_binary_build_folder}/WHONIX_DISCLAIMER "
   fi

   if [ "$vm_multiple" = "false" ]; then
      filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.xml "

      if [ "$dist_build_raw" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.raw "
      fi
      if [ "$dist_build_qcow2" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/${VMNAME}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
      fi
   else
      filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.xml "
      filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.xml "
      filelist_full_path+="$libvirt_target_network_file_external "
      filelist_full_path+="$libvirt_target_network_file_internal "

      if [ "$dist_build_raw" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw "
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.raw "
      fi
      if [ "$dist_build_qcow2" = "true" ]; then
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Gateway-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
         filelist_full_path+="${dist_binary_build_folder}/Whonix-Workstation-${dist_build_desktop}-${dist_build_version}.${target_architecture_pretty_name}.qcow2 "
      fi
   fi

   if [ "$dist_build_raw" = "true" ]; then
      xz_archive="$libvirt_target_raw_xz_archive"
   fi
   if [ "$dist_build_qcow2" = "true" ]; then
      xz_archive="$libvirt_target_qcow2_xz_archive"
   fi

   true "filelist_full_path: $filelist_full_path"

   local file_name_item_full_path
   for file_name_item_full_path in $filelist_full_path ; do
      test -f "$file_name_item_full_path"
      filelist_base_name+=" $(basename "$file_name_item_full_path")"
   done

   local file_name_item_base_name
   for file_name_item_base_name in $filelist_base_name ; do
      test -f "$file_name_item_base_name"
   done

   ## TODO: add progress meter (using `pv`?)
   tar \
      --create \
      --verbose \
      --owner=0 --group=0 --numeric-owner \
      --mode=go=rX,u+rw,a-s \
      --sort=name \
      --sparse \
      --mtime='2015-10-21 00:00Z' \
      --xz \
      --directory="${dist_binary_build_folder}" \
      --file "$(basename "$xz_archive")" \
      $filelist_base_name

   strip-nondeterminism "$xz_archive"

   sync

   ## sanity test
   if [ ! -r "$xz_archive" ]; then
      error "xz_archive $xz_archive not readable!"
   fi
}

virtualbox_export() {
   if [ ! "$dist_build_virtualbox" = "true" ]; then
      return 0
   fi
   if [ "$dist_build_iso" = "true" ]; then
      return 0
   fi
   if [ "$dist_build_installer_dist" = "true" ]; then
      return 0
   fi

   local producturl vendorurl vendor eulafile description
   if [ "$dist_build_type_long" = "kicksecure" ]; then
      producturl="https://www.${dist_upload_destination_site}"
      vendor="Kicksecure"
      eulafile="${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
   else
      producturl="https://www.${dist_upload_destination_site}/wiki/Other_Operating_Systems"
      vendor="Whonix"
      eulafile="${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
   fi

   vendorurl="https://www.${dist_upload_destination_site}"
   description="\
Build Version [A]: ${dist_build_version}

Stay tuned! [B]

Please donate! [C]

[A] https://www.${dist_upload_destination_site}/wiki/Build_Version
[B] https://www.${dist_upload_destination_site}/wiki/Stay_Tuned
[C] https://www.${dist_upload_destination_site}/wiki/Donate"

   rm --force "$binary_image_ova"

   ## --vsys needs to precede --eulafile.

   ## https://forums.whonix.org/t/allow-us-to-download-the-vm-files-in-a-compressed-format-like-zip-7z-gzip-etc/14210/6
   TAR_OPTIONS="\
      $TAR_OPTIONS
      --owner=0 --group=0 --numeric-owner \
      --mode=go=rX,u+rw,a-s \
      --sort=name \
      --sparse \
      --mtime='2015-10-21 00:00Z' \
      --xz \
      "
   export TAR_OPTIONS
   XZ_OPT="$XZ_OPT -9"
   export XZ_OPT

   if [ "$vm_multiple" = "false" ]; then
      VBoxManage \
         export "$VMNAME" \
         --vsys "0" \
         --eulafile "$eulafile" \
         --description "$description" \
         --manifest \
         --product "$VMNAME" \
         --producturl "$producturl" \
         --vendor "$vendor" \
         --vendorurl "$vendorurl" \
         --version "${dist_build_version}" \
         --output "$binary_image_ova"
   else
      VBoxManage \
         export $vm_names_to_be_exported \
         --output "$binary_image_ova" \
         --vsys '0' \
            --eulafile "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT" \
            --description "$description" \
            --manifest \
            --product "Whonix-Gateway" \
            --producturl "https://www.${dist_upload_destination_site}/wiki/Whonix-Gateway" \
            --vendor "Whonix" \
            --vendorurl "https://www.${dist_upload_destination_site}" \
            --version "${dist_build_version}" \
         --vsys '1' \
            --eulafile "$binary_image_text" \
            --description "$description" \
            --manifest \
            --product "Whonix-Workstation" \
            --producturl "https://www.${dist_upload_destination_site}/wiki/Whonix-Workstation" \
            --vendor "Whonix" \
            --vendorurl "https://www.${dist_upload_destination_site}" \
            --version "${dist_build_version}"
   fi

   ## Only important for redistribution.
   ## VirtualBox creates $binary_image_ova with u+r only, which is problematic
   ## with respect to rsync.
   chmod ugo+r "$binary_image_ova"

   sync

   ## Sanity test.
   ## A different --vmname is required, because $VMNAME does already exist
   ## in the list of imported VirtualBox machines.
   if [ "$vm_multiple" = "false" ]; then
      VBoxManage \
         import "$binary_image_ova" \
         --vsys "0" \
         --eula show \
         --vmname "$VMNAME-${dist_build_version}"

      VBoxManage \
         import "$binary_image_ova" \
         --vsys "0" \
         --eula accept \
         --vmname "$VMNAME-${dist_build_version}" \
         --dry-run
   else
      VBoxManage \
         import "$binary_image_ova" \
         --vsys "0" \
            --eula show \
            --vmname "Whonix-Gateway-${dist_build_version}" \
         --vsys "1" \
            --eula show \
            --vmname "Whonix-Workstation-${dist_build_version}" \

      VBoxManage \
         import "$binary_image_ova" \
         --vsys "0" \
            --eula accept \
            --vmname "Whonix-Gateway-${dist_build_version}" \
            --dry-run \
         --vsys "1" \
            --eula accept \
            --vmname "Whonix-Workstation-${dist_build_version}" \
            --dry-run
   fi
}

torrent_create() {
   ## Thanks to:
   ## https://github.com/moba/createtortorrents/blob/master/createtorrents.sh

   #[ -n "$TRACKERS" ] || TRACKERS=="udp://tracker.openbittorrent.com:80/announce,udp://tracker.publicbt.com:80/announce,http://tracker.openbittorrent.com:80/announce,http://tracker.publicbt.com:80/announce,udp://tracker.ccc.de/announce"

   [ -n "$TRACKERS" ] || TRACKERS="http://announce.torrentsmd.com:6969/announce"

   ## Not well supported by BitTorrent clients.
   ## Multi file webseeds do not work
   ##     https://trac.transmissionbt.com/ticket/4437
   ## (fixed upstream, but takes a while to propagate to Debian stable)
   #mktorrent \
   #   --verbose \
   #   --announce="$TRACKERS" \
   #   --web-seed "https://download.${dist_upload_destination_site}/Whonix-Gateway-7.ova" \
   #   --web-seed "https://download.${dist_upload_destination_site}/Whonix-Workstation-7.ova" \
   #   ~/7

   ## CoralCDN:
   ## .8008.nyud.net can no longer be appended to https://download.${dist_upload_destination_site},
   ## because CoralCDN appears to no longer support files greater than 50 MB.

   if [ "$dist_build_virtualbox" = "true" ]; then
      rm --force "$binary_image_ova_torrent"
      mktorrent \
         --verbose \
         --announce="$TRACKERS" \
         --web-seed "https://download.${dist_upload_destination_site}/ova/${dist_build_version}/$(basename "$binary_image_ova")" \
         -o "$binary_image_ova_torrent" \
         "$binary_image_ova"
   fi

   if [ "$dist_build_raw" = "true" ]; then
      rm --force "$libvirt_target_raw_xz_archive_torrent"
      mktorrent \
         --verbose \
         --announce="$TRACKERS" \
         --web-seed "https://download.${dist_upload_destination_site}/libvirt/${dist_build_version}/$(basename "$libvirt_target_raw_xz_archive")" \
         -o "$libvirt_target_raw_xz_archive_torrent" \
         "$libvirt_target_raw_xz_archive"
   fi

   if [ "$dist_build_qcow2" = "true" ]; then
      rm --force "$libvirt_target_qcow2_xz_archive_torrent"
      mktorrent \
         --verbose \
         --announce="$TRACKERS" \
         --web-seed "https://download.${dist_upload_destination_site}/libvirt/${dist_build_version}/$(basename "$libvirt_target_qcow2_xz_archive")" \
         -o "$libvirt_target_qcow2_xz_archive_torrent" \
         "$libvirt_target_qcow2_xz_archive"
   fi

   if [ "$dist_build_iso" = "true" ]; then
      rm --force "$binary_image_iso_torrent"
      mktorrent \
         --verbose \
         --announce="$TRACKERS" \
         --web-seed "https://download.${dist_upload_destination_site}/libvirt/${dist_build_version}/$(basename "$binary_image_iso")" \
         -o "$binary_image_iso_torrent" \
         "$binary_image_iso"
   fi

   if [ "$dist_build_installer_dist" = "true" ]; then
      return 0
   fi

   ## Working.
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${dist_upload_destination_site}/ova/Whonix-Gateway-7.ova");' "$2")"
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${dist_upload_destination_site}/ova/Whonix-Workstation-7.ova");' "$2")"

   ## Not working.
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${dist_upload_destination_site}/ova/Whonix-Gateway-7.ova");' "$2")"
   #echo "$(perl -MURI::Escape -e 'print uri_escape("https://download.${dist_upload_destination_site}/ova/Whonix-Workstation-7.ova");' "$2")"
}

hashes_create_and_verify() {
   if [ "$dist_build_installer_dist" = "true" ]; then
      #$hash_sum "$(basename "$binary_image_installer_dist_image")" | tee --append "$hash_file"
      return 0
   fi

   for hash_sum in sha256sum sha512sum; do
      case "$hash_sum" in
         "sha256sum")
            hash_file="$sha_two_hundredth_fifty_six_hash_file"
            ;;
         "sha512sum")
            hash_file="$sha_five_hundredth_twelve_hash_file"
            ;;
         *)
            error "Undefined hash_sum."
            return 0
            ;;
      esac

      if [ "$dist_build_iso" = "true" ]; then
         true "INFO: Not deleting hash_file '$hash_file'. Appending."
      else
         rm --force "$hash_file"
      fi

      ## Using `basename` so we end up with relative paths in hash sums file.

      if [ "$dist_build_virtualbox" = "true" ]; then
         $hash_sum "$(basename "$binary_image_ova")" | tee --append "$hash_file"
      fi

      if [ "$dist_build_raw" = "true" ]; then
         $hash_sum "$(basename "$libvirt_target_raw_xz_archive")" | tee --append "$hash_file"
      fi

      if [ "$dist_build_qcow2" = "true" ]; then
         $hash_sum "$(basename "$libvirt_target_qcow2_xz_archive")" | tee --append "$hash_file"
      fi

      if [ "$dist_build_iso" = "true" ]; then
         $hash_sum "$(basename "$binary_image_iso")" | tee --append "$hash_file"
      fi

      sync

      ## Sanity test.
      $hash_sum --check "$hash_file"
   done
}

sign_cmd_gpg() {
   ## GPG signatures do not authenticate filenames by default, therefore add
   ## the name of the file as a OpenPGP notation so at least users that look
   ## at OpenPGP notations have a chance to detect if file names have been
   ## tampered with.
   $gpg_bin --detach-sign --armor --yes --set-notation "file@name"="$(basename "$1")" "$1"
}

sign_cmd_signify() {
   ## To create a key for signify-openbsd:
   ## as user "user"
   ## mkdir -p ~/.signify
   ## cd ~/.signify
   ## signify-openbsd -n -G -p keyname.pub -s keyname.sec -c "Firstname Lastname e-mail@address.org signify"

   ## https://forums.whonix.org/t/signify-openbsd/7842
   signify-openbsd -S -s "$signify_private_key" -m "$1" -x "$2"
   ## Sanity test.
   test -f "$2"
}

verify_cmd_gpg() {
   $gpg_bin --verify-options show-notations --verify "$1"
}

verify_cmd_signinfy() {
   signify-openbsd -V -p "$signify_public_key" -m "$1" -x "$2"
}

signatures_create() {
   ## Create detached signatures.
   if [ "$dist_build_virtualbox" = "true" ]; then
      sign_cmd_gpg "$binary_image_ova"
      sign_cmd_gpg "$binary_image_ova_torrent"

      ## Too big.
      #sign_cmd_signify "$binary_image_ova"

      sign_cmd_signify "$binary_image_ova_torrent" "$binary_image_ova_torrent_signify"
   fi

   if [ "$dist_build_raw" = "true" ]; then
      sign_cmd_gpg "$libvirt_target_raw_xz_archive"
      sign_cmd_gpg "$libvirt_target_raw_xz_archive_torrent"

      ## Too big.
      #sign_cmd_signify "$libvirt_target_raw_xz_archive"

      sign_cmd_signify "$libvirt_target_raw_xz_archive_torrent" "$libvirt_target_raw_xz_archive_torrent_signify"
   fi

   if [ "$dist_build_qcow2" = "true" ]; then
      sign_cmd_gpg "$libvirt_target_qcow2_xz_archive"
      sign_cmd_gpg "$libvirt_target_qcow2_xz_archive_torrent"

      ## Too big.
      #sign_cmd_signify "$libvirt_target_qcow2_xz_archive"

      sign_cmd_signify "$libvirt_target_qcow2_xz_archive_torrent" "$libvirt_target_qcow2_xz_archive_torrent_signify"
   fi

   if [ "$dist_build_iso" = "true" ]; then
      sign_cmd_gpg "$binary_image_iso"
      sign_cmd_gpg "$binary_image_iso_torrent"

      ## Too big.
      #sign_cmd_signify "$libvirt_target_qcow2_xz_archive"

      sign_cmd_signify "$binary_image_iso_torrent" "$binary_image_iso_torrent_signature"
   fi

   if [ "$dist_build_installer_dist" = "true" ]; then
      sign_cmd_gpg "$binary_image_installer_dist_image"
      sign_cmd_signify "$binary_image_installer_dist_image" "$binary_image_installer_dist_signify"
      ## Skip creation of hash sum files.
      return 0
   fi

   sign_cmd_gpg "$sha_two_hundredth_fifty_six_hash_file"
   sign_cmd_gpg "$sha_five_hundredth_twelve_hash_file"

   sign_cmd_signify "$sha_two_hundredth_fifty_six_hash_file" "$sha_two_hundredth_fifty_six_hash_file_signify"
   sign_cmd_signify "$sha_five_hundredth_twelve_hash_file" "$sha_five_hundredth_twelve_hash_file_signify"
}

signatures_verify() {
   ## Verify, that signing worked.
   if [ "$dist_build_virtualbox" = "true" ]; then
      verify_cmd_gpg "$binary_image_ova_signature"
      verify_cmd_gpg "$binary_image_ova_torrent_signature"

      ## Too big.
      #verify_cmd_signinfy "$binary_image_ova_signature"
      verify_cmd_signinfy "$binary_image_ova_torrent" "$binary_image_ova_torrent_signify"
   fi

   if [ "$dist_build_raw" = "true" ]; then
      verify_cmd_gpg "$libvirt_target_raw_xz_archive_signature"
      verify_cmd_gpg "$libvirt_target_raw_xz_archive_torrent_signature"

      ## Too big.
      #verify_cmd_signinfy "$libvirt_target_raw_xz_archive"
      verify_cmd_signinfy "$libvirt_target_raw_xz_archive_torrent" "$libvirt_target_raw_xz_archive_torrent_signify"
   fi

   if [ "$dist_build_qcow2" = "true" ]; then
      verify_cmd_gpg "$libvirt_target_qcow2_xz_archive_signature"
      verify_cmd_gpg "$libvirt_target_qcow2_xz_archive_torrent_signature"

      ## Too big.
      #verify_cmd_signinfy "$libvirt_target_qcow2_xz_archive"
      verify_cmd_signinfy "$libvirt_target_qcow2_xz_archive_torrent" "$libvirt_target_qcow2_xz_archive_torrent_signify"
   fi

   if [ "$dist_build_iso" = "true" ]; then
      verify_cmd_gpg "$binary_image_iso_signature"
      verify_cmd_gpg "$binary_image_iso_torrent_signature"

      ## Too big.
      #verify_cmd_signinfy "$binary_image_iso_signature"
      verify_cmd_signinfy "$binary_image_iso_torrent" "$binary_image_ova_torrent_signify"
   fi

   if [ "$dist_build_installer_dist" = "true" ]; then
      verify_cmd_gpg "$binary_image_installer_dist_signature"
      verify_cmd_signinfy "$binary_image_installer_dist_image" "$binary_image_installer_dist_signify"
      ## Skip verification of hash sum files since not created for installer-dist.
      return 0
   fi

   verify_cmd_gpg "$sha_two_hundredth_fifty_six_hash_file_signature"
   verify_cmd_gpg "$sha_five_hundredth_twelve_hash_file_signature"

   verify_cmd_signinfy "$sha_two_hundredth_fifty_six_hash_file" "$sha_two_hundredth_fifty_six_hash_file_signify"
   verify_cmd_signinfy "$sha_five_hundredth_twelve_hash_file" "$sha_five_hundredth_twelve_hash_file_signify"
}

main() {
   sanity_tests

   if [ "$dist_build_installer_dist" = "true" ]; then
      mkdir --parents "$binary_image_installer_dist_folder"
      cp "$binary_image_installer_dist_source" "$binary_image_installer_dist_image"
   fi

   ## libvirt_compress uses --directory="${dist_binary_build_folder}"
   if [ "$dist_build_type_long" = "kicksecure" ]; then
      cp "$source_code_folder_dist/packages/kicksecure/kicksecure-base-files/usr/share/kicksecure/KICKSECURE_BINARY_LICENSE_AGREEMENT" "${dist_binary_build_folder}/KICKSECURE_BINARY_LICENSE_AGREEMENT"
      cp "$source_code_folder_dist/packages/kicksecure/kicksecure-base-files/usr/share/kicksecure/KICKSECURE_DISCLAIMER" "${dist_binary_build_folder}/KICKSECURE_DISCLAIMER"
   else
      cp "$source_code_folder_dist/packages/whonix/whonix-base-files/usr/share/whonix/WHONIX_BINARY_LICENSE_AGREEMENT" "${dist_binary_build_folder}/WHONIX_BINARY_LICENSE_AGREEMENT"
      cp "$source_code_folder_dist/packages/whonix/whonix-base-files/usr/share/whonix/WHONIX_DISCLAIMER" "${dist_binary_build_folder}/WHONIX_DISCLAIMER"
   fi

   if [ "$dist_build_type_long" = "gateway" ]; then
      ## skip, to unify gateway image with workstation image
      return 0
   fi

   vm_multiple=false
   if [ "$dist_build_type_long" = "workstation" ]; then
      vm_multiple=true
      ## dist_build_desktop could be KDE, CLI, XFCE, RPi or CUSTOM
      vm_names_to_be_exported="Whonix-Gateway-${dist_build_desktop} Whonix-Workstation-${dist_build_desktop}"
   fi
   if [ "$dist_build_type_long" = "custom-workstation" ]; then
      vm_names_to_be_exported="$VMNAME"
   fi
   if [ "$dist_build_type_long" = "kicksecure" ]; then
      vm_names_to_be_exported="$VMNAME"
   fi

   libvirt_compress
   virtualbox_export
   hashes_create_and_verify
   torrent_create
   signatures_create
   signatures_verify
   sync
}

main "$@"
