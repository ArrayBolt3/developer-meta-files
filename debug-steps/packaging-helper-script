#!/bin/bash

## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e
set -o pipefail
set -o errtrace

true "INFO: Currently running script: $BASH_SOURCE $@"

build_all_error_handler() {
   echo "
${red}${bold}BASH_COMMAND${reset}: $BASH_COMMAND
${red}${bold}ERROR $BASH_SOURCE: | caller: $(caller)${reset}
reponame: $reponame
" >&2
   echo "Press enter to continue or ctrl +c to break or enter to continue." >&2
   sleep 2
   read temp || true
   true
}

trap "build_all_error_handler" ERR
set +e

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
my_pkg_name="$(basename "$(dirname "$MYDIR")")"

cd "$MYDIR"

source ../../../help-steps/colors

cd ..

## Source make-helper.bsh to get function make_get_variables.
source ../genmkfile/usr/share/genmkfile/make-helper-one.bsh

cd ..

counter=0

nothing_to_commit_msg="On branch master
nothing to commit, working tree clean"

rm -f /tmp/list-of-packages

command -v isutf8 >/dev/null

repo_skip() {
   if [ "main" = "$1" ]; then
      if [ "$main_source_code_folder" = "true" ]; then
         true "Skipping $reponame (main)."
         return 1
      fi
   fi
   if [ "$reponame" = "$1" ]; then
      true "Skipping $reponame."
      return 1
   fi
}

## XXX
version_old_main="16.0.3.1-developers-only"
version_new_main="16.0.3.7-developers-only"
version_main_new_short="16.0.3.7"

## XXX
announcements_draft_folder="/home/user/whonix_binary/announcements-drafts"
giant_git_log_file="$announcements_draft_folder/giant_git_log.txt"
mkdir -p "$announcements_draft_folder"

commit_filter() {
    set +x

    if echo "$commit_msg_short" | grep -i -q "Merge remote-tracking branch" ; then
       set -x
       return 1
    fi
    if echo "$commit_msg_short" | grep -i -q "Merge pull request" ; then
       set -x
       return 1
    fi
    if echo "$commit_msg_short" | grep -i -q "lintian FHS" ; then
       set -x
       return 1
    fi
    if echo "$commit_msg_short" | grep -i -q "LANG=C" ; then
       set -x
       return 1
    fi
    if echo "$commit_msg_short" | grep -i -q "genmkfile manpages" ; then
       set -x
       return 1
    fi
    if echo "$commit_msg_short" | grep -i -q "lintian" ; then
       set -x
       return 1
    fi

    for text in \
        "re-generated man pages" \
        "update lintian tag name" \
        "genmkfile debinstfile" \
        "update-path" \
        "output, refactoring" \
        "man" \
        "manpage" \
        "lintian" \
        "fix comment" \
        "genmkfile manpages" \
        "update comment" \
        "fix linitian warning" \
        "PEP8" \
        "intentd" \
        "improve error handling" \
        "refactoring; output" \
        "refactoring; fix" \
        "fix; refactoring" \
        "refactoring; debugging" \
        "output; refactoring" \
        "autopep8" \
        "anondate" \
        "apparmor" \
        "update path" \
        "update link" \
        "package description" \
        "update copyright year" \
        "remove white spaces from file names" \
        "Added creation of upstream changelog to debian/rules" \
        "add debian install file" \
        "remove genmkfile" \
        "# On branch master nothing to commit (working directory clean)" \
        "copyright" \
        "fix lintian warnings" \
        "fix lintian warning" \
        "fixed debian/changelog" \
        "fix path" \
        "remove trailing spaces" \
        "typos" \
        "minor" \
        "typo" \
        "update Depends" \
        "update copyright" \
        "Update Copyright" \
        "remove faketime from Build-Depends:" \
        "remove debian/gain-root-command workaround" \
        "packaging simplification config-package-dev (>= 5.1) -> config-package-dev" \
        "packaging, bumped Standards-Version from 3.9.6 to 3.9.8 for jessie support" \
        "bump version number" \
        "bumped version number" \
        "bumped changelog version" \
        "packaging" \
        "fix" \
        "comment" \
        "comments" \
        "output" \
        "news" \
        "readme" \
        "updated generic makefile" \
        "bumped compat from 8 to 9" \
        "Updated debian/changelog." \
        "Fixed changelog date." \
        "updated makefile generic to version 1.3" \
        "updated makefile generic to version 1.4" \
        "updated makefile generic to version 1.5" \
        "added changelog.upstream" \
        "quotes" \
        "refactoring" \
        "debugging" \
        "lintian warning copyright fix" \
        "https://www.whonix.org/wiki/Dev/Licensing" \
        "port to debian buster" \
        "port to debian bullseye" \
        "surpress lintian warning" \
        "update" \
        "fix debian/watch lintian warning debian-watch-contains-dh_make-template" \
        "code simplification" \
        "simplification" \
        "update path to pre.bsh" \
        "sudo" \
        "gksudo" \
        "description" \
        "buster" \
        "bullseye" \
        "cleanup" \
        "license" \
        "update path to pre.bsh" \
        "anon-shared-helper-scripts -> helper-scripts" \
        "enable debugging" \
        "Update control" \
        "fix output" \
        "local" \
        "man page" \
        "coypright" \
        "formatting" \
        "improve error handler" \
        "cleanup" \
        "fix lintian warning" \
        "bump" \
        "trailing spaces" \
        "coypright" \
        "description" \
        "shuffle" \
        "use pre.bsh" \
        "set -e" \
        "Update control" \
        "update control" \
        "disable debugging" \
        "set -o pipefail" \
        "style" \
        "upgrade license from GPLv2+ to GPLv3+" \
        "CI fix" \
        "."
        do
        if [ "$text" = "$commit_msg_short" ]; then
            set -x
            return 1
        fi
    done

    set -x
}

pkg_readme_creator_commit() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

#    repo_skip "anon-meta-packages" || return 0
#    repo_skip "monero-gui" || return 0
#    repo_skip "lkrg" || return 0

   ## global readme_file
   if [ -f "README_generic.md" ]; then
      ## When there is a README_generic.md, this is a way to express
      ## "do not create a generic README.md for that package, because it
      ## already has a real readme."
      readme_file="README_generic.md"
   else
      readme_file="README.md"
   fi
   git add "$readme_file" || true
   git commit -m "readme" || true
}

pkg_readme_creator_do() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

#    repo_skip "anon-meta-packages" || return 0
#    repo_skip "monero-gui" || return 0
#    repo_skip "lkrg" || return 0

   ## TODO: genmkfile not required. Easy "dpkg-buildpackage -b".
   repo_skip "tirdad" || return 0
   #repo_skip "lkrg" || return 0

   local control_file
   control_file="debian/control"

   if [ ! -f "$control_file" ]; then
      true "No file"
      return
   fi

   generic_readme="../whonix-developer-meta-files/README_generic.md"
   test -f "$generic_readme"

   local line first_word matched headline

   ## global readme_file
   if [ -f "README_generic.md" ]; then
      ## When there is a README_generic.md, this is a way to express
      ## "do not create a generic README.md for that package, because it
      ## already has a real readme."
      readme_file="README_generic.md"
   else
      readme_file="README.md"
   fi

   rm --force "$readme_file"

   matched=0

   while read -r line; do
      read -r first_word _ <<< "$line"
      if [ "$first_word" = "Description:" ]; then
         matched=$(( $matched + 1 ))
      fi
      if [ "$matched" -gt "1" ]; then
         break
      fi
      if [ "$matched" = "1" ]; then
         if [ "$line" = "" ]; then
            break
         fi
         if [ "$headline" = "done" ]; then
            true
         else
            line_with_keyword="$(echo "$line" | awk -F ":" '{ print $2 }')"
            echo "#$line_with_keyword #" | tee -a "$readme_file" >/dev/null
            echo "" | tee -a "$readme_file" >/dev/null
            headline=done
            continue
         fi
         if [ "$line" = "." ]; then
            echo "" | tee -a "$readme_file" >/dev/null
         else
            echo "$line" | tee -a "$readme_file" >/dev/null
         fi
      fi
   done < "$control_file"

#    if [ -d "man" ]; then
#       echo "# Manual Page #" >> "$readme_file"
#       echo "" | tee -a "$readme_file" >/dev/null
#       echo 'See also `man` folder for more information.' >> "$readme_file"
#       echo "" | tee -a "$readme_file" >/dev/null
#    fi

   while read -r line; do
      line="${line/package-name/$reponame}"
      echo "$line" | tee -a "$readme_file" >/dev/null
   done < "$generic_readme"

   true "Done: $readme_file"
}

recurse() {
   local file_name
   for file_name in "$1"/*; do
      if [ -d "$file_name" ]; then
         #echo "dir: $i"
         recurse "$file_name"
       elif [ -f "$file_name" ]; then
         echo "$file_name"
       fi
   done
}

pkg_descr_creator() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0
   repo_skip "anon-icon-pack" || return 0
   repo_skip "kicksecure-network-conf" || return 0

   local file_name file_name_without_leading_dot

   local to_skip_list="
changelog.upstream
CONTRIBUTING.md
COPYING
GPLv3
Makefile
README.md
"

   if [ ! "$deleted_yet" = "true" ]; then
      rm -f "$MYDIR"/../package_documentation/*.mediawiki
      deleted_yet=true
   fi

   for file_name in $(recurse "$repo_full_path") ; do
      ## Skip binary files for better performance.
      if ! isutf8 -q "$file_name" ; then
         continue
      fi

      true "file_name: $file_name"
      temp="$file_name"
      file_name_without_leading_dot="$(echo "$temp" | LANG=C str_replace "/home/user/whonix_dot/Whonix/packages/" "")"
      file_name_without_leading_dot="$(echo "$file_name_without_leading_dot" | LANG=C str_replace "/home/user/Whonix/packages/" "")"

      file_name_without_reponame="$(echo "$file_name_without_leading_dot" | cut -d "/" -f2-)"
      file_name_without_reponame="/${file_name_without_reponame}"

      if ! isutf8 -q "$file_name" ; then
         continue
      fi

      file_name_to_open="~/Whonix/packages/$file_name_without_leading_dot"

      repo_web_link="https://github.com/Whonix/$reponame"
      debian_control_web_link="https://github.com/Whonix/$reponame/blob/master/debian/control"
      web_link="https://github.com/Whonix/$reponame/blob/master${file_name_without_reponame}"

      base_name="${file_name##*/}"

      skip_file=false
      for to_skip_file in $to_skip_list ; do
         #echo "$to_skip_file $base_name"
         if [ "$to_skip_file" = "$base_name" ]; then
            skip_file=true
            continue
         fi
      done

      if [ "$skip_file" = "true" ]; then
         continue
      fi

      test -f "$file_name"

      meta_start=false
      non_qubes_whonix_only=no
      qubes_whonix_only=no
      projects=""
      categories=""
      gateway_only=no
      workstation_only=no
      installed_by_default=yes
      description=no
      file_header_done=false
      while read -r line; do
         true "line: $line"
         read -r first_word second_word third_word _ <<< "$line" || true

         if [ "$first_word" = "####" ]; then
            #echo "$web_link $file_name_to_open"

            #file_name_editor="$(echo "$file_name_to_open" | LANG=C str_replace "~" ~)"
            #kate "$file_name_editor"
            #break

            true "second_word: '$second_word'"
            if [ "$second_word" = "meta" ]; then
               if [ "$third_word" = "start" ]; then
                  meta_start=true
                  echo "##################################################"
                  echo "$file_name_to_open"
                  continue
               fi
               if [ "$third_word" = "end" ]; then
                  meta_start=false
                  break
               fi
            fi
            if [ "$second_word" = "project" ]; then
               projects="$(echo "$line" | LANG=C str_replace "#### project " "")"
               projects="$(echo "$projects" | LANG=C str_replace " and" "")"
               echo "projects: $projects"
               continue
            fi
            if [ "$second_word" = "non_qubes_whonix_only" ]; then
               if [ "$third_word" = "yes" ]; then
                  non_qubes_whonix_only=yes
                  continue
               fi
            fi
            if [ "$second_word" = "qubes_whonix_only" ]; then
               if [ "$third_word" = "yes" ]; then
                  qubes_whonix_only=yes
                  continue
               fi
            fi
            if [ "$second_word" = "gateway_only" ]; then
               if [ "$third_word" = "yes" ]; then
                  gateway_only=yes
                  continue
               fi
            fi
            if [ "$second_word" = "workstation_only" ]; then
               if [ "$third_word" = "yes" ]; then
                  workstation_only=yes
                  continue
               fi
            fi
            if [ "$second_word" = "installed_by_default" ]; then
               if [ "$third_word" = "no" ]; then
                  installed_by_default=no
                  continue
               fi
            fi
            if [ "$second_word" = "category" ]; then
               categories="$(echo "$line" | LANG=C str_replace "#### category " "")"
               categories="$(echo "$categories" | LANG=C str_replace " and" "")"
               echo "categories: $categories"
               continue
            fi
            if [ "$second_word" = "description" ]; then
               description=yes
               continue
            fi
         fi

         if [ "$description" = "yes" ]; then
            if [ "$line" = "" ]; then
               internal_descr_writer ""
               continue
            fi

            ## translate '##' to newline
            if [ "$line" = "##" ]; then
               line=""
               internal_descr_writer ""
               continue
            fi

            first_character_of_line="${line:0:1}"
            second_character_of_line="${line:1:1}"
            ## translate '#commented-out-command' to '* <code>#commented-out-command</code><br />'
            if [ "$first_character_of_line" = "#" ]; then
               if [ ! "$second_character_of_line" = "#" ]; then
                  line="$(echo "$line" | LANG=C str_replace "#" "")"
                  line="<code>#$line</code><br />"
                  internal_descr_writer "$line"
                  continue
               fi
            fi

            if [ ! "$first_character_of_line" = "#" ]; then
               line="* <code>$line</code>"
               internal_descr_writer "$line"
               continue
            fi

            line="$(echo "$line" | LANG=C str_replace "## " "")"
            internal_descr_writer "$line"
         fi
      done < "$file_name"
   done

   ## TODO
   #exit
}

declare -A -g file_header_done
declare -A -g file_deleted_already

internal_descr_writer() {
   #for project in $projects ; do
      for category in $categories ; do
         description_write_to_file="$MYDIR/../package_documentation/${reponame}_${category}.mediawiki"

         if [ ! -f "$description_write_to_file" ]; then
            touch "$description_write_to_file"

            echo "== $reponame ==" >> "$description_write_to_file"
            echo "" >> "$description_write_to_file"

            echo "* $repo_web_link" >> "$description_write_to_file"
            echo "* [$debian_control_web_link debian/control]" >> "$description_write_to_file"

            local control_file
            control_file="$repo_full_path/debian/control"
            test -f "$control_file"
            local matched line first_word line_with_keyword
            while read -r line; do
               read -r first_word _ <<< "$line"
               if [ "$matched" = "true" ]; then
                  if [ "$line" = "." ]; then
                     echo "" >> "$description_write_to_file"
                  else
                     echo "$line" >> "$description_write_to_file"
                  fi
               fi
               if [ "$first_word" = "Description:" ]; then
                  matched="true"
                  line_with_keyword="$(echo "$line" | awk -F ":" '{ print $2 }')"
                  echo "=== $line_with_keyword ===" >> "$description_write_to_file"
                  echo "" >> "$description_write_to_file"
               fi
            done < "$control_file"
         fi

         if [ ! "${file_header_done["${file_name_without_leading_dot}_${project}_${category}"]}" = "true" ]; then
            echo "=== $file_name_without_reponame ===" >> "$description_write_to_file"
            echo "" >> "$description_write_to_file"
            echo "* [$web_link $file_name_without_reponame]" >> "$description_write_to_file"
            echo "* <code>$file_name_to_open</code>" >> "$description_write_to_file"
            if [ "$gateway_only" = "yes" ]; then
               echo "* gateway only<!--gateway-only-->" >> "$description_write_to_file"
            fi
            if [ "$workstation_only" = "yes" ]; then
               echo "* workstation only<!--workstation-only-->" >> "$description_write_to_file"
            fi
            if [ "$non_qubes_whonix_only" = "yes" ]; then
               echo "* Non-Qubes-Whonix only" >> "$description_write_to_file"
            fi
            if [ "$qubes_whonix_only" = "yes" ]; then
               echo "* Qubes-Whonix only" >> "$description_write_to_file"
            fi
            if [ "$installed_by_default" = "no" ]; then
               echo "* Not installed by default." >> "$description_write_to_file"
            fi

            echo "" >> "$description_write_to_file"
            file_header_done["${file_name_without_leading_dot}_${project}_${category}"]=true
         fi
         echo "$@" >> "$description_write_to_file"
      done
   #done
}

pkg_descr_merger() {
   ## TODO
   category=networking

   package_documentation_all_merged_file="$MYDIR/../package_documentation/${category}.allmerged.mediawiki"
   rm -f "$package_documentation_all_merged_file"

   local file_name_full_path file_name_only package_name machine

   for file_name_full_path in "$MYDIR/../package_documentation/"*"_${category}.mediawiki" ; do
      file_name_only="${file_name_full_path##*/}"
      package_name="$(echo "$file_name_only" | LANG=C str_replace "_${category}.mediawiki" "")"

      if echo "$package_name" | grep "\-gw-" ; then
         machine=gateway
      elif echo "$package_name" | grep "\-ws-" ; then
         machine=workstation
      else
         machine=shared
      fi

      ## TODO: don't hardcode here
      if [ "$package_name" = "onion-grater" ]; then
         machine=gateway
      fi
      if [ "$package_name" = "anon-apps-config" ]; then
         machine=workstation
      fi
      if [ "$package_name" = "bindp" ]; then
         machine=workstation
      fi
      if [ "$package_name" = "ipv4-forward-disable" ]; then
         machine=gateway
      fi
      if [ "$package_name" = "ipv6-disable" ]; then
         machine=gateway
      fi

      package_documentation_merged_file="$MYDIR/../package_documentation/${machine}_${category}.merged.mediawiki"

      if [ ! "${file_deleted_already["${package_documentation_merged_file}"]}" = "true" ]; then
         rm -f "$package_documentation_merged_file"
         file_deleted_already["${package_documentation_merged_file}"]=true
      fi

      cat "$file_name_full_path" >> "$package_documentation_merged_file"
   done
}

pkg_descr_merge_all() {
   ## TODO
   category=networking

   pkg_descr_merger

   local machine_list machine file_name_full_path
   machine_list="gateway workstation shared"

   for machine in $machine_list ; do
      file_name_full_path="$MYDIR/../package_documentation/${machine}_${category}.merged.mediawiki"
      true "file_name_full_path: $file_name_full_path"
      true "package_documentation_all_merged_file: $package_documentation_all_merged_file"

      if [ "$machine" = "gateway" ]; then
         echo "= Whonix-Gateway =" >> "$package_documentation_all_merged_file"
      fi
      if [ "$machine" = "workstation" ]; then
         echo "= Whonix-Workstation =" >> "$package_documentation_all_merged_file"
      fi
      if [ "$machine" = "shared" ]; then
         echo "= Shared by Whonix-Gateway and Whonix-Workstation =" >> "$package_documentation_all_merged_file"
      fi

      cat "$file_name_full_path" >> "$package_documentation_all_merged_file"
   done

   exit
}

pkg_links_echo() {
   echo "https://github.com/Whonix/$reponame"
   #echo "https://github.com/adrelanos/$reponame"
}

pkg_links_markdown_echo() {
   echo "[$reponame](https://github.com/Whonix/$reponame)"
   #echo "https://github.com/adrelanos/$reponame"
}

pkg_echo_commits_adrelanos() {
   echo "https://github.com/Whonix/$reponame/commits?author=adrelanos"
}

pkg_names_echo() {
   echo "$reponame"
}

pkg_links_open() {
   torbrowser --new-tab "$(pkg_links_echo)"
}

pkg_twitter_to_github() {

#   echo "\
#{
#  "name": "web",
#  "active": true,
#  "events": [
#    "push",
#    "pull_request"
#  ],
#  "config": {
#    "url": "http://example.com/webhook",
#    "content_type": "json"
#  }
#}" > /tmp/xxx789

   echo "\
 {
    \"name\": \"twitter\",
    \"events\": [
      \"push\"
    ],
    \"supported_events\": [
      \"push\"
    ],
    \"title\": \"Twitter\",
    \"schema\": [
      [
        \"string\",
        \"1280368298-pfu7jKs5EwAq8JUlce9efKVURNIzH7BwtQkv78F\"
      ],
      [
        \"string\",
        \"NLRQlofXcg78Oo8B4ATmtQ3Njhx4rn9O4enWhSs\"
      ],
      [
        \"false\",
        \"digest\"
      ],
      [
        \"boolean\",
        \"short_format\"
      ]
    ]
  }" > /tmp/xxx789


   #POST /repos/:owner/:repo/hooks

   #curl -X POST -d @/tmp/xxx789 http://example.com/path/to/resource --header "Content-Type:application/json"

   #curl -v -u adrelanos:$gh_token -X POST https://api.github.com/authorizations --data @/tmp/xxx789

   curl -v -H "Authorization: token $gh_token" -X POST https://api.github.com/orgs/Whonix/repos --data @/tmp/xxx789

   true "press enter"
   read temp
}

pkg_git_remotes_add() {
   git remote add     adrelanos         git@github.com:adrelanos/$reponame.git || true
   git remote set-url adrelanos         git@github.com:adrelanos/$reponame.git || true

   git remote add     github-whonix     git@github.com:Whonix/$reponame.git || true
   git remote set-url github-whonix     git@github.com:Whonix/$reponame.git || true

   git remote add     github-kicksecure git@github.com:Kicksecure/$reponame.git || true
   git remote set-url github-kicksecure git@github.com:Kicksecure/$reponame.git || true

   git remote add     gitlab-whonix     git@gitlab.com:whonix/$reponame.git || true
   git remote set-url gitlab-whonix     git@gitlab.com:whonix/$reponame.git || true

   git remote add     gitlab-kicksecure git@gitlab.com:kicksecure/$reponame.git || true
   git remote set-url gitlab-kicksecure git@gitlab.com:kicksecure/$reponame.git || true

   true
}

pkg_git_branch_Whonix15() {
   git checkout master
   git branch Whonix15 || true
   true
}

pkg_git_diff_branch_Whonix15() {
   git checkout master
   git diff Whonix15 || true
   true
}

pkg_git_update_branch_Whonix15() {
   git checkout master
   git checkout Whonix15
   git merge --ff-only master
   git checkout master
   true
}

pkg_git_branch_checkout_master() {
   git checkout master
   true
}

pkg_git_branch_checkout_Whonix15() {
   git checkout Whonix15
   true
}

pkg_git_diff_branch_master() {
   git diff master
   true
}

pkg_git_diff_branch_development() {
   git diff development || true
   true
}

pkg_packaging_copy() {
   repo_skip "main" || return 0
   repo_skip "genmkfile" || return 0

   cp "../genmkfile/usr/share/genmkfile/Makefile" "./"

   git add "./Makefile"
   git rm "./make-helper.bsh"

   git commit -m "updated makefile generic to version 1.5"

   true
}

pkg_copy_contributing_file() {
   repo_skip "main" || return 0
   repo_skip "kloak" || return 0
   repo_skip "corridor" || return 0

   cp "/home/user/Whonix/CONTRIBUTING.md" "$repo_full_path/CONTRIBUTING.md"
   git add "$repo_full_path/CONTRIBUTING.md"
   git commit -m "update"

   true
}

pkg_compat_delete() {
   git rm "debian/compat"

   true
}

pkg_debhelper_bump() {
#    two='debhelper (>= 12)'
#    two='debhelper (>= 13), debhelper-compat (= 13)'
#    LANG=C str_replace "$one" "$two" "$repo_full_path/debian/control"

#    one='http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/'
#    two='https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/'
#    LANG=C str_replace "$one" "$two" debian/copyright
#    LANG=C str_replace "$one" "$two" COPYING

#    one="Standards-Version: 3.9.8"
#    two="Standards-Version: 4.5.1

#    LANG=C str_replace "$one" "$two" "$repo_full_path/debian/control"
#
#    one="debian-watch-may-check-gpg-signature"
#    two="debian-watch-does-not-check-gpg-signature"
#    LANG=C str_replace "$one" "$two" "$repo_full_path/debian/source/lintian-overrides"
#
#    one="ruby-ronn"
#    two="ronn"
#    LANG=C str_replace "$one" "$two" "$repo_full_path/debian/control"
#
#    one='Priority: extra'
#    two='Priority: optional'
#    LANG=C str_replace "$one" "$two" "$repo_full_path/debian/control"

   one='--with=config-package --with=systemd'
   two='--with=config-package'
   LANG=C str_replace "$one" "$two" "$repo_full_path/debian/rules"

   git add "$repo_full_path/debian/rules"
   git commit -m "port to debian bullseye" || true
}

pkg_packaging_files_diff() {
   local compare_with_path
   ## Some arbitrary package used as template for comparison.
   compare_with_path="../anon-apt-sources-list"
   compare_with_full_path="$(realpath "$compare_with_path")"

   if [ "$reponame" = "qubes-whonix" ]; then
      test -f "$repo_full_path/CONTRIBUTING.md"
   elif [ "$reponame" = "corridor" ]; then
      ## Corridor has no CONTRIBUTING.md file.
      true
   else
      diff "$compare_with_full_path/CONTRIBUTING.md" "$repo_full_path/CONTRIBUTING.md"
   fi

   if [ "$reponame" = "corridor" ]; then
      ## Corridor is not GPLv3 but public domain.
      true
   else
      ## Could also use
      ##     diff "$compare_with_full_path/GPLv3" "./"
      ## but the implementation below produces more comfortable output.
      diff "$compare_with_full_path/GPLv3" "$repo_full_path/GPLv3"
   fi

   if [ ! -f "$compare_with_full_path/COPYING" ]; then
      error "$compare_with_full_path/COPYING does not exist."
   fi

   if [ ! -f "$repo_full_path/README.md" ]; then
      if [ ! -f "$repo_full_path/README.mediawiki" ]; then
         error "Neither $repo_full_path/README.md nor $repo_full_path/README.mediawiki exist."
      fi
   fi

   diff "$compare_with_full_path/debian/source/format" "$repo_full_path/debian/source/format"

   if [ "$reponame" = "corridor" ]; then
      ## Corridor has no COPYING but a LICENSE-ISC file.
      test -f "$repo_full_path/LICENSE-ISC"
   else
      ## COPYING should always match debian/copyright.
      diff "$repo_full_path/COPYING" "$repo_full_path/debian/copyright"

      ## Would show license files that are different.
      ## This is useful to manually enable sometimes.
      #diff "$compare_with_full_path/COPYING" "$repo_full_path/COPYING"

#       if diff ~/old-copying "$repo_full_path/COPYING" &>/dev/null ; then
#          cp ~/Whonix/COPYING "$repo_full_path/COPYING"
#          cp ~/Whonix/COPYING "$repo_full_path/debian/copyright"
#       else
#          echo "$reponame" >> /tmp/list-of-packages
#          kate "$repo_full_path/COPYING"
#          kate "$repo_full_path/debian/copyright"
#       fi

   fi

   if [ ! -f "$repo_full_path/debian/changelog" ]; then
      error "$repo_full_path/debian/changelog does not exist."
   fi
   if [ ! -f "$repo_full_path/debian/control" ]; then
      error "$repo_full_path/debian/control does not exist."
   fi
   if [ ! -f "$repo_full_path/debian/copyright" ]; then
      error "$repo_full_path/debian/copyright does not exist."
   fi
   if [ ! -f "$repo_full_path/debian/rules" ]; then
      error "$repo_full_path/debian/rules does not exist."
   fi
   if [ ! -f "$repo_full_path/debian/watch" ]; then
      error "$repo_full_path/debian/watch does not exist."
   fi

   true
}

internal_git_diff() {
   git_exit_code="0"
   git_diff_output="$(git diff --stat "$1" "$2")" || { git_exit_code="$?" ; true; };

   if [ "$git_exit_code" = "128" ]; then
      true "ERROR: Something is wrong. See above. Press enter to continue."
      read error
   fi

   if [ "$git_diff_output" = "" ]; then
      if [ "$git_exit_code" = "0" ]; then
         return 1
      fi
   fi

   return 0
}

pkg_git_fetch_remotes() {
   git fetch adrelanos &
   git fetch gitlab-whonix &
   git fetch github-whonix &
}

pkg_git_push_remotes() {
#    if [ "$reponame" = "monero-gui" ]; then
#       true
#    else
#       if internal_git_diff master adrelanos/master ; then
#          git push adrelanos master &
#          git_pid="$!"
#          #wait "$git_pid"
#          git_pid_list="$git_pid_list $git_pid"
#       fi
#    fi

#    if internal_git_diff Whonix15 adrelanos/Whonix15 ; then
#       git push adrelanos Whonix15 &
#       git_pid="$!"
#       #wait "$git_pid"
#       git_pid_list="$git_pid_list $git_pid"
#    fi

   if [ "$reponame" = "monero-gui" ]; then
      true
   elif [ "$reponame" = "binaries-freedom" ]; then
      true
   else
      if internal_git_diff master github-whonix/master ; then
         git push github-whonix master &
         git_pid="$!"
         #wait "$git_pid"
         git_pid_list="$git_pid_list $git_pid"
      fi
   fi

   if internal_git_diff master gitlab-whonix/master ; then
      git push gitlab-whonix master &
      git_pid="$!"
      #wait "$git_pid"
      git_pid_list="$git_pid_list $git_pid"
   fi

#    if internal_git_diff Whonix15 origin/Whonix15  ; then
#       git push origin Whonix15 &
#       git_pid="$!"
#       ##wait "$git_pid"
#       git_pid_list="$git_pid_list $git_pid"
#    fi

#    genmkfile git-tag-push &
#    git_pid="$!"
#    ##wait "$git_pid"
#    git_pid_list="$git_pid_list $git_pid"

   true
}

git_reset_changelog_upstream() {
   git checkout changelog.upstream
}

pkg_git_commmit_readme() {
   git add README.md
   #git diff --cached
   msg="readme"
   git commit -m "$msg"
   git status
}

pkg_git_commit_changelog() {
   git add debian/changelog
   git add changelog.upstream
   msg="bumped changelog version"
   git commit -m "$msg"
   git status
   true
}

pkg_git_commit_copyright() {
   msg='copyright'
   git add -A
   git commit -m "$msg" || true
   git status
   true
}

pkg_git_manpages() {
   if ! test -d "man" ; then
      return 0
   fi
   genmkfile manpages
   msg='re-generate man pages (generated using "genmkfile manpages")'
   git add auto-generated-man-pages/* || true
   git commit -m "$msg" || true
   git status
   true
}

pkg_git_debinstfile() {
   genmkfile debinstfile
   msg='add debian install file (generated using "genmkfile debinstfile")'
   git add "debian/$item.install" || true
   git commit -m "$msg" || true
   git status
   true
}

pkg_git_commit_packaging() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   returned="$(git status)"
   if [ "$returned" = "$nothing_to_commit_msg" ]; then
      true "press enter to continue_not"
      #read temp
      return
   fi

   #git add Makefile
   #git add make-helper.bsh
   #git add debian/changelog
   #git add changelog.upstream
   #git add debian/*.install
   git add debian/control
   #git add -A
   msg="bullseye"
   git commit -m "$msg"
   git status
   true
}

pkg_git_genmkfile_remove() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0
   repo_skip "genmkfile" || return 0

   returned="$(git status)"
   if [ "$returned" = "$nothing_to_commit_msg" ]; then
      true "press enter to continue_not"
      #read temp
      return
   fi

   git add -A
   msg="remove genmkfile"
   git commit -m "$msg"
   git status

   true
}

pkg_git_commit_all_things() {
   git add -A
   msg="bullseye"
   git commit -m "$msg" || true
   git status
   true
}

pkg_add_dh_changelogs_override_to_debian_rules() {
   echo "
override_dh_installchangelogs:
	dh_installchangelogs changelog.upstream upstream" >> "debian/rules"
   true
}

pkg_git_reset() {
   git reset --hard
}

pkg_git_diff_and_commit() {
   #git reset --hard
   #continue

   ## Remove extra new lines.
   ## Thanks to llua http://unix.stackexchange.com/a/81689
   #a=$(<debian/rules); printf '%s\n' "$a" > debian/rules
   #continue

   returned="$(git status)"
   if [ "$returned" = "$nothing_to_commit_msg" ]; then
      true "press enter to continue_not"
      #read temp
      return
   fi

   commit_message="LANG=C str_replace"

   git add -A

   git diff --cached
   true "press enter to continue"
   read temp

   git commit -m "$commit_message"

   returned="$(git status)"
   if [ "$returned" = "$nothing_to_commit_msg" ]; then
      true "press enter to continue_not"
      #read temp
      return
   fi

   true
}

pkg_debian_control_open() {
   kate "$item/debian/control"
}

pkg_git_submodule_file_writer() {
   if [ ! "$git_submodule_file_deleted" = "true" ]; then
      rm ../../".gitmodules"
      git_submodule_file_deleted=true
   fi

   echo "\
[submodule \"packages/$reponame\"]
        path = packages/$reponame
        url = https://gitlab.com/whonix/${reponame}.git
" >> ../../".gitmodules"
}

pkg_git_log_giant_make() {
   if [ "$giant_git_log_delete_once" = "" ]; then
      giant_git_log_delete_once=done
      rm -r -f "$giant_git_log_file"
   fi

   echo "########################################" >> "$giant_git_log_file"
   echo "" >> "$giant_git_log_file"
   echo "https://github.com/Whonix/$reponame" >> "$giant_git_log_file"

   git --no-pager shortlog "${version_old}..${version_new}" >> "$giant_git_log_file"

   ## TODO
   #$(git describe)..master

   true
}

pkg_git_main_git_log_writer() {
   pushd .. >/dev/null
   pushd .. >/dev/null
}

pkg_git_packges_git_log_writer() {
   #repo_skip "main" || return 0
   repo_skip "lkrg" || return 0
   repo_skip "hardened_malloc" || return 0

   if [ "$giant_git_log_delete_once" = "" ]; then
      giant_git_log_delete_once=done
      announcement_create=true
      rm -r -f "$giant_git_log_file"
   fi

   notable_changes=""

   if [ "$main_source_code_folder" = "false" ]; then
      pushd .. >/dev/null
      if package_version_old="$(git rev-parse "${version_old_main}:packages/$reponame")" ; then
         new_package=false
      else
         new_package=true
      fi
      package_version_new="$(git rev-parse "${version_new_main}:packages/$reponame")"
      popd >/dev/null
   else
      new_package=false
      package_version_old="${version_old_main}"
      package_version_new="${version_new_main}"
   fi

   if [ "$new_package" = "false" ]; then
      if [ "${package_version_old}" = "${package_version_new}" ]; then
         return 0
      else
         commit_msg_short_list="$(git --no-pager log --pretty="%H %s" "${package_version_old}..${package_version_new}")"
         #echo "git --no-pager log ${package_version_old}..${package_version_new}" >> "$giant_git_log_file"
         #echo ""
      fi
   else
      commit_msg_short_list="$(git --no-pager log --pretty="%H %s")"
      #echo "git --no-pager log" >> "$giant_git_log_file"
      #echo ""
      return 0
   fi

   while read -r commit_hash commit_msg_short ; do
      if ! commit_filter ; then
         true "SKIP: $commit_msg_short"
         continue
      fi
      true "OK: $commit_msg_short"

      committer_person="$(git log --format="%an" -n 1 "$commit_hash")"
      commit_msg_full="$(git log --format="%B" -n 1 "$commit_hash")"
      ## Remove trailing spaces.
      commit_msg_full="${commit_msg_full%"${commit_msg_full##*[![:space:]]}"}"
      commit_msg_full="$(echo "$commit_msg_full" | sed '/^[[:space:]]*$/d')"
      ## Replace new lines with spaces to unbreak links for multi line comments.
      commit_msg_full="$(echo "$commit_msg_full" | tr "\n" " ")"
      ## Remove trailing spaces.
      commit_msg_full="${commit_msg_full%"${commit_msg_full##*[![:space:]]}"}"
      commit_msg_full_with_link="$commit_msg_full <ref>
https://gitlab.com/whonix/$reponame/-/commit/$commit_hash
</ref>"

      if [ "$committer_person" = "madaidan" ]; then
         committer_person="@${committer_person}"
      elif [ "$committer_person" = "Gavin Pacini" ]; then
         committer_person="@GavinPacini"
      elif [ "$committer_person" = "Gavin Pacini" ]; then
         committer_person="@JeremyRand"
      elif [ "$committer_person" = "HulaHoop0" ]; then
         committer_person="@HulaHoop"
      fi

      if [ "$committer_person" = "Patrick Schleizer" ]; then
         credit_msg=""
      else
         credit_msg=" (Thanks to ${committer_person}!)"
      fi

      log_msg="$commit_msg_full_with_link"
      log_msg+="$credit_msg"

      if [ "$notable_changes" = "" ]; then
         notable_changes=yes
         echo "[https://gitlab.com/whonix/$reponame <code>$reponame_pretty</code>]:" >> "$giant_git_log_file"
      fi

      echo "* $log_msg" >> "$giant_git_log_file"

   done <<< "$commit_msg_short_list"

   true
}

pkg_git_sign_tags() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   true "${cyan}reponame: ${under}$reponame${eunder}${reset} 1/4 TODO"
   genmkfile git-commit-verify
   true "${cyan}reponame: ${under}$reponame${eunder}${reset} 1/4 done"

   true "${cyan}reponame: ${under}$reponame${eunder}${reset} 2/4 TODO"
   if ! genmkfile git-verify 2>/dev/null ; then
      true "${cyan}reponame: ${under}$reponame${eunder}${reset} 2/4 done"

      true "${cyan}reponame: ${under}$reponame${eunder}${reset} 3/4 TODO"
      genmkfile git-tag-sign
      true "${cyan}reponame: ${under}$reponame${eunder}${reset} 3/4 done"
   fi

   genmkfile git-verify

   true
}

pkg_verify_signed_commit() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   genmkfile git-commit-verify
   true
}

pkg_verify_signed_commit_and_tag() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   genmkfile git-verify
   true
}

pkg_dput_cfg_writer() {
   make_get_variables

   launchpad_name="adrelanos"

   echo "\
[${reponame}]
fqdn			= ppa.launchpad.net
method			= sftp
incoming                = ~${launchpad_name}/${reponame}/ubuntu/
login			= ${launchpad_name}
allowed_distributions 	= trusty" >> /home/user/dput.cfg

   true
}

## debug-steps/packaging-helper-script pkg_need_version_bump_show 2>/dev/null
pkg_need_version_bump_show() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   last_log_entry="$(git log --format=%s -1)"

   if [ "bumped changelog version" = "$last_log_entry" ]; then
      return 0
   fi
   if [ "readme" = "$last_log_entry" ]; then
      return 0
   fi

   echo "needs version bump: $item"
   true
}

## debug-steps/packaging-helper-script pkg_need_version_bump_do 2>/dev/null
pkg_need_version_bump_do() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   last_log_entry="$(git log --format=%s -1)"

   if [ "bumped changelog version" = "$last_log_entry" ]; then
      return 0
   fi
   if [ "readme" = "$last_log_entry" ]; then
      return 0
   fi

   echo "needs version bump: $item"

   pkg_upstream_and_debian_changelog_bump

   true
}

pkg_need_version_bump_and_pkg_build_and_reprepro_add() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   last_log_entry="$(git log --format=%s -1)"

   if [ "bumped changelog version" = "$last_log_entry" ]; then
      return 0
   fi
   if [ "readme" = "$last_log_entry" ]; then
      return 0
   fi

   returned="$(git status)"
   if [ ! "$returned" = "$nothing_to_commit_msg" ]; then
      true "uncommited changes #1"
      exit 1
   fi

   genmkfile git-commit-verify

   pkg_git_manpages
   pkg_git_debinstfile
   pkg_readme_creator_commit

   echo "needs version bump: $item"
   pkg_upstream_and_debian_changelog_bump

   returned="$(git status)"
   if [ ! "$returned" = "$nothing_to_commit_msg" ]; then
      true "uncommited changes #2"
      exit 1
   fi

   ## Includes "genmkfile git-commit-verify".
   pkg_git_sign_tags

   make_git_tag_latest="$(git describe --tags $(git rev-list --tags --max-count=1))"

   git push gitlab-whonix master
   git push gitlab-whonix "$make_git_tag_latest"
   if [ "$reponame" = "monero-gui" ]; then
      true
   elif [ "$reponame" = "binaries-freedom" ]; then
      true
   else
      git push github-whonix master
      git push github-whonix "$make_git_tag_latest"
   fi

   export make_lintian=true
   export make_use_cowbuilder=true
   genmkfile deb-pkg
   genmkfile reprepro-add
   genmkfile deb-cleanup

   true
}

pkg_need_version_bump_and_pkg_build_and_reprepro_add_and_push_remotes() {
   pkg_need_version_bump_and_pkg_build_and_reprepro_add
   pkg_git_push_remotes
}

pkg_only_build_all() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   export make_lintian=true
   export make_use_cowbuilder=true
   genmkfile deb-pkg

   true
}

pkg_upstream_and_debian_changelog_bump() {
   repo_skip "main" || return 0
   repo_skip "whonix-developer-meta-files" || return 0

   genmkfile deb-uachl-bumpup-major

   git add changelog.upstream
   git add debian/changelog
   git commit -m "bumped changelog version"

   true
}

pkg_add_lintian_watch_gpg_override() {
   mkdir --parents "./debian/source"
   echo "\
## https://phabricator.whonix.org/T277
debian-watch-does-not-check-gpg-signature" > "./debian/source/lintian-overrides"
}

pkg_git_commit_lintian_watch_gpg_override() {
   git add "./debian/source/lintian-overrides"
   local msg
   msg="\
added debian/source/lintian-overrides with debian-watch-does-not-check-gpg-signature to fix lintian warning - https://phabricator.whonix.org/T277"
   git commit -m "$msg"
   true
}

pkg_add_lintian_watch_gpg_override() {
   mkdir --parents "./debian/source"
   echo "\
## https://phabricator.whonix.org/T277
debian-watch-does-not-check-gpg-signature" > "./debian/source/lintian-overrides"
}

debian_watch_file_create() {
   echo "## Copyright (C) 2012 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

version=4
opts=filenamemangle=s/.+\/v?(\d\S+)\.tar\.gz/$reponame-\$1\.tar\.gz/ \\
  https://github.com/Whonix/$reponame/tags .*/v?(\d\S+)\.tar\.gz" > "$repo_full_path/debian/watch"

   git add "$repo_full_path/debian/watch"
   local msg
   msg="\
fix debian/watch lintian warning debian-watch-contains-dh_make-template"
   git commit -m "$msg"
   true
}

## not yet used
onetime_usrmerge() {
   if ! -d ./lib ; then
      return 0
   fi

   mkdir -p ./usr
   git mv ./lib ./usr/

   sed -i '/lib\/\*/d' "./debian/$item.install"
   git add "./debian/$item.install"

   true
}

## not yet used
do_nothing() {
   true "INFO: Doing nothing."
}

announcement() {
   echo "\
Whonix ${version_main_new_short} - for VirtualBox - Point Release!

# Testers Wanted!

Download the Testers-Only version of Whonix for VirtualBox:

https://www.whonix.org/wiki/VirtualBox_Testers_Only_Version

----

Alternatively, in-place release upgrade is possible upgrade using [Whonix testers repository](https://www.whonix.org/wiki/Project-APT-Repository).

----

This release would not have been possible without the numerous supporters of Whonix!

----

Please Donate!

https://www.whonix.org/wiki/Donate

----

Please Contribute!

https://www.whonix.org/wiki/Contribute

----

# Changelog

TODO

https://www.whonix.org/wiki/Testers_Release

$giant_git_log_file

----

# Full difference of all changes

[https://github.com/Whonix/Whonix/compare/${version_old_main}...${version_new_main}](https://github.com/Whonix/Whonix/compare/${version_old_main}...${version_new_main})

----

(This testers wanted announcement might in future be [transformed](https://forums.whonix.org/t/transform-whonix-testers-wanted-forum-news-post-into-whonix-release-forum-news-post-ok/11405) into a stable release announcement if no major issues are found during the testing period.)" | \
   tee "$announcements_draft_folder/Whonix_VirtualBox_testers.txt" >/dev/null

####

   echo "\
Whonix ${version_main_new_short} - for VirtualBox - Point Release!

# Whonix for VirtualBox

Download Whonix for VirtualBox:

https://www.whonix.org/wiki/VirtualBox

----

This is a point release.

https://www.whonix.org/wiki/Point_Release

----

# Major Changes

TODO

----

# Upgrade

Alternatively, in-place release upgrade is possible upgrade using [Whonix repository](https://www.whonix.org/wiki/Project-APT-Repository).

----

This release would not have been possible without the numerous supporters of Whonix!

----

Please Donate!

https://www.whonix.org/wiki/Donate

----

Please Contribute!

https://www.whonix.org/wiki/Contribute

----

# Changelog

TODO

https://www.whonix.org/wiki/Stable_Release

----

# Full difference of all changes

 https://github.com/Whonix/Whonix/compare/${version_old_main}...${version_new_main}

----

(This forum post was previously a call for testers. No release critical bugs where found during the testing period. This forum post was therefore [transformed](https://forums.whonix.org/t/transform-whonix-testers-wanted-forum-news-post-into-whonix-release-forum-news-post-ok/11405) into a stable release announcement. See edit history.)" | \
   tee "$announcements_draft_folder/Whonix_VirtualBox_point.txt" >/dev/null
}

loop_helper_worker() {
   counter=$(( $counter + 1 ))
   true "item: $item | counter: $counter"

   reponame="$(basename "$item")"
   reponame_pretty="$reponame"
   repo_full_path="$(realpath "$item")"

   true "${cyan}INFO: reponame: $reponame${reset}"

   if [ ! "$main_source_code_folder" = "true" ]; then
      cd "$item"
   else
      reponame_pretty="Whonix build script"
   fi

   $@

   if [ ! "$main_source_code_folder" = "true" ]; then
      cd ..
   fi

   #true "press enter to continue_did"
   #read temp
}

loop_helper() {
   main_source_code_folder=false
   for item in ./*; do
      if [ ! -d "$item" ]; then
         continue
      fi
      loop_helper_worker "$@"
   done

   ## Whonix/Whonix
   main_source_code_folder=true
   item=Whonix
   cd ..

   loop_helper_worker "$@"
}

main() {
   args="$@"
   if [ "$args" = "" ]; then
      true "INFO: Available functions..."
      typeset -f | awk '/ \(\) $/ && !/^main / {print $1}' | grep -E "^pkg_*"
      true "INFO: syntax: ./$0 function-name"
      exit 0
   fi

   loop_helper "$@"
   true
}

## TODO
# item=uwt
# reponame="$(basename "$item")"
# repo_full_path="$(realpath "$item")"
# pkg_descr_creator
# exit

if [ "$@" = "commit_filter" ]; then
   commit_filter
   exit 0
fi

main "$@"

## To auto generate a release announcement, run:
## ./debug-steps/packaging-helper-script pkg_git_packges_git_log_writer
##
## Can be found in folder $announcements_draft_folder
if [ "$announcement_create" = "true" ]; then
   announcement
fi
